name: CI Build App

on:
  push:
    branches: [main]
    paths:
      - 'src/**'
      - '.github/workflows/**'
      - 'docker/**'
  pull_request:

env:
  IMAGE_REG: registry.rigel.lab.geeko.me
  IMAGE_REPO: suse/demoapp

permissions:
  packages: write
  statuses: write
  checks: write

jobs:
  build:
    name: 'Build & push image'
    # needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: 'Install node'
        run: |
          apk update && apk add --no-cache git docker docker-compose nodejs gpg openssh npm ansible
      - name: 'Checkout'
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      # https://github.com/docker/setup-buildx-action
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3      # Uses the `docker/login-action` action to log in to the Container registry registry using the account and password that will publish the packages. Once published, the packages are scoped to the account defined here.
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.IMAGE_REG}}
          username: ${{ secrets.REGISTRY_USER }}
          password: ${{ secrets.REGISTRY_PASSWORD }}
      # This step uses [docker/metadata-action](https://github.com/docker/metadata-action#about) to extract tags and labels that will be applied to the specified image. The `id` "meta" allows the output of this step to be referenced in a subsequent step. The `images` value provides the base name for the tags and labels.
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_REG }}/${{ env.IMAGE_REPO }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      # This step uses the `docker/build-push-action` action to build the image, based on your repository's `Dockerfile`. If the build succeeds, it pushes the image to GitHub Packages.
      # It uses the `context` parameter to define the build's context as the set of files located in the specified path. For more information, see "[Usage](https://github.com/docker/build-push-action#usage)" in the README of the `docker/build-push-action` repository.
      # It uses the `tags` and `labels` parameters to tag and label the image with the output from the "meta" step.
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64/v8
          file: docker/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
  deploy:
    name: 'Deploy to Kubernetes'
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: 'Install node + helm'
        run: |
          apk update && apk add --no-cache git docker docker-compose nodejs gpg openssh npm ansible helm jq
      - name: 'Make kubeconfig from kubeconfig.yaml'
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBECONFIG }}" | base64 -d > ~/.kube/config
          cat ~/.kube/config
      - name: 'Helm install'
        run: |
          helm upgrade --install -n demoapp --create-namespace demoapp ./charts/demoapp --set image.tag=${{ github.ref_name }}
